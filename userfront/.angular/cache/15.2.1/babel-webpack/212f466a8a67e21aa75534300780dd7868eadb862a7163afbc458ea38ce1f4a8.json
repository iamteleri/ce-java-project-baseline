{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/token.service\";\nexport class UserInterceptor {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n  }\n  intercept(request, next) {\n    let intReq = request;\n    const token = this.tokenService.getToken();\n    if (token != null) {\n      intReq = request.clone({\n        headers: request.headers.set('Authorization', 'Bearer ' + token)\n      });\n    }\n    return next.handle(intReq);\n  }\n}\nUserInterceptor.ɵfac = function UserInterceptor_Factory(t) {\n  return new (t || UserInterceptor)(i0.ɵɵinject(i1.TokenService));\n};\nUserInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserInterceptor,\n  factory: UserInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAiB;EAEjDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAIC,MAAM,GAAGF,OAAO;IACpB,MAAMG,KAAK,GAAG,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE;IAC1C,IAAID,KAAK,IAAI,IAAI,EAAE;MACjBD,MAAM,GAAGF,OAAO,CAACK,KAAK,CAAC;QAACC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGJ,KAAK;MAAC,CAAC,CAAC;;IAE5F,OAAOF,IAAI,CAACO,MAAM,CAACN,MAAM,CAAC;EAC5B;;AAXWN,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;AAAA","names":["UserInterceptor","constructor","tokenService","intercept","request","next","intReq","token","getToken","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["/home/arobles/CE/userfront/src/app/interceptors/user.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TokenService } from '../service/token.service';\n\n@Injectable()\nexport class UserInterceptor implements HttpInterceptor {\n\n  constructor(private tokenService: TokenService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let intReq = request;\n    const token = this.tokenService.getToken();\n    if (token != null) {\n      intReq = request.clone({headers: request.headers.set('Authorization', 'Bearer ' + token)});\n    }\n    return next.handle(intReq);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}