{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst TOKEN_KEY = 'AuthTpken';\nexport class TokenService {\n  constructor() {}\n  setToken(token) {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.setItem(TOKEN_KEY, token);\n  }\n  getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  }\n  logout() {\n    localStorage.removeItem(TOKEN_KEY);\n  }\n  isLogged() {\n    return this.getToken() != null;\n  }\n  isAdmin() {\n    if (!this.isLogged()) {\n      return false;\n    } else {\n      const token = this.getToken();\n      const payload = token.split(\".\")[1];\n      const decoded = atob(payload);\n      const values = JSON.parse(decoded);\n      const roles = values.roles;\n      console.log(values);\n      if (roles.indexOf('ROLE_ADMIN') < 0) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n  getUserId() {\n    if (!this.isLogged()) {\n      return '';\n    } else {\n      const token = this.getToken();\n      const payload = token.split(\".\")[1];\n      const decoded = atob(payload);\n      const values = JSON.parse(decoded);\n      return values.id;\n    }\n  }\n}\nTokenService.ɵfac = function TokenService_Factory(t) {\n  return new (t || TokenService)();\n};\nTokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenService,\n  factory: TokenService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,MAAMA,SAAS,GAAG,WAAW;AAK7B,OAAM,MAAOC,YAAY;EAEvBC,eAAgB;EAETC,QAAQ,CAACC,KAAa;IAC3BC,YAAY,CAACC,UAAU,CAACN,SAAS,CAAC;IAClCK,YAAY,CAACE,OAAO,CAACP,SAAS,EAAEI,KAAK,CAAC;EACxC;EAEOI,QAAQ;IACb,OAAOH,YAAY,CAACI,OAAO,CAACT,SAAS,CAAC;EACxC;EAEOU,MAAM;IACXL,YAAY,CAACC,UAAU,CAACN,SAAS,CAAC;EACpC;EAEOW,QAAQ;IACb,OAAO,IAAI,CAACH,QAAQ,EAAE,IAAI,IAAI;EAChC;EAEOI,OAAO;IACZ,IAAI,CAAC,IAAI,CAACD,QAAQ,EAAE,EAAC;MACnB,OAAO,KAAK;KACb,MAAM;MACL,MAAMP,KAAK,GAAG,IAAI,CAACI,QAAQ,EAAE;MAC7B,MAAMK,OAAO,GAAGT,KAAM,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACpC,MAAMC,OAAO,GAAGC,IAAI,CAACH,OAAO,CAAC;MAC7B,MAAMI,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;MAClC,MAAMK,KAAK,GAAGH,MAAM,CAACG,KAAK;MAC1BC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;MACnB,IAAIG,KAAK,CAACG,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;QACnC,OAAO,KAAK;OACb,MAAM;QACL,OAAO,IAAI;;;EAGjB;EAEOC,SAAS;IACd,IAAI,CAAC,IAAI,CAACb,QAAQ,EAAE,EAAC;MACnB,OAAO,EAAE;KACV,MAAM;MACL,MAAMP,KAAK,GAAG,IAAI,CAACI,QAAQ,EAAE;MAC7B,MAAMK,OAAO,GAAGT,KAAM,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACpC,MAAMC,OAAO,GAAGC,IAAI,CAACH,OAAO,CAAC;MAC7B,MAAMI,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;MAClC,OAAOE,MAAM,CAACQ,EAAE;;EAEpB;;AAjDWxB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAyB,SAAZzB,YAAY;EAAA0B,YAFX;AAAM","names":["TOKEN_KEY","TokenService","constructor","setToken","token","localStorage","removeItem","setItem","getToken","getItem","logout","isLogged","isAdmin","payload","split","decoded","atob","values","JSON","parse","roles","console","log","indexOf","getUserId","id","factory","providedIn"],"sourceRoot":"","sources":["/home/arobles/CE/userfront/src/app/service/token.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'AuthTpken';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenService {\n\n  constructor() { }\n\n  public setToken(token: string): void {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public getToken(): string | null {\n    return localStorage.getItem(TOKEN_KEY);\n  }\n\n  public logout(): void {\n    localStorage.removeItem(TOKEN_KEY);\n  }\n\n  public isLogged(): boolean {\n    return this.getToken() != null;\n  }\n\n  public isAdmin(): boolean {\n    if (!this.isLogged()){\n      return false;\n    } else {\n      const token = this.getToken();\n      const payload = token!.split(\".\")[1];\n      const decoded = atob(payload);\n      const values = JSON.parse(decoded);\n      const roles = values.roles;\n      console.log(values);\n      if (roles.indexOf('ROLE_ADMIN') < 0) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  public getUserId(): string {\n    if (!this.isLogged()){\n      return '';\n    } else {\n      const token = this.getToken();\n      const payload = token!.split(\".\")[1];\n      const decoded = atob(payload);\n      const values = JSON.parse(decoded);\n      return values.id;\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}